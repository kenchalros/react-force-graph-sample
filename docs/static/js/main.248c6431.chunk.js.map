{"version":3,"sources":["DynamicGraph.tsx","Canvas.tsx","data.tsx","App.tsx","index.tsx"],"names":["DynamicGraph","graphData","useState","data","setData","fgRef","useRef","handleClick","useCallback","node","nodes","newLinks","links","filter","l","source","target","newNodes","n","id","handleRightClick","new_id","length","newNode","name","String","val","newLink","ref","onNodeClick","onNodeRightClick","nodeCanvasObject","ctx","globalScale","label","fontSize","font","bckgDimensions","measureText","width","map","center","size","radius","x","y","height","beginPath","moveTo","lineTo","arcTo","stroke","roundedRectStroke","textAlign","textBaseline","fillStyle","fillText","App","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.248c6431.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport ForceGraph2D, { NodeObject, LinkObject, GraphData } from 'react-force-graph-2d';\nimport { roundedRectStroke } from './Canvas';\nimport { Node, Link } from './data';\n\nexport const DynamicGraph: React.FC<{graphData: GraphData}> = ({graphData}) => {\n  const [data, setData] = useState(graphData)\n  const fgRef: any = useRef();\n\n  /**\n   * Callback method of left click.\n   * A clicked node will be removed.\n   */\n  const handleClick = useCallback((node: NodeObject) => {\n    const {nodes, links} = data;\n    const newLinks = links.filter((l: LinkObject) => l.source !== node && l.target !== node);\n    const newNodes = nodes.filter((n: NodeObject) => n.id !== node.id);\n    setData({nodes: newNodes, links: newLinks});\n  }, [data, setData]);\n\n  /**\n   * Callback method of right click.\n   * This callback will create a node and link to a clicked node.\n   */\n  const handleRightClick = useCallback((node: NodeObject) => {\n    const {nodes, links} = data;\n    const new_id = nodes.length+1;\n    const newNode: Node = {\n      id: new_id,\n      name: \"name\"+String(new_id),\n      val: 5,\n    }\n    const newLink: Link = {\n      source: node.id!,\n      target: new_id\n    };\n    setData({\n      nodes: [...nodes, newNode as NodeObject],\n      links: [...links, newLink as LinkObject],\n    })\n  }, [data, setData])\n\n  /**\n   * Custom render function for `nodeCanvasObject` of `ForceGraph2D`\n   */\n  const canvasRender = (node: NodeObject, ctx: CanvasRenderingContext2D, globalScale: any) => {\n    const label = (node as Node).name;\n    const fontSize = 16/globalScale;\n    ctx.font = `${fontSize}px Sans-Serif`;\n    const textWidth = ctx.measureText(label).width;\n    const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 1);\n    roundedRectStroke(\n      ctx,\n      {x: node.x! - bckgDimensions[0]/2, y: node.y! - bckgDimensions[1]/2},\n      {width: bckgDimensions[0], height: bckgDimensions[1]},\n      1);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = 'gray';\n    ctx.fillText(label, node.x!, node.y!);\n  };\n\n  return (\n    <ForceGraph2D\n      ref={fgRef}\n      graphData={data}\n      onNodeClick={handleClick}\n      onNodeRightClick={handleRightClick}\n      nodeCanvasObject={canvasRender}\n    />\n  )\n}\n","/**\n * Draw a rounded react stroke.\n * @param ctx Canvas context\n * @param center Center coordinates of the diagram\n * @param size Size of the diagram\n * @param radius The degree of corner bending\n */\nexport const roundedRectStroke = (\n    ctx: CanvasRenderingContext2D,\n    center: {x: number, y: number},\n    size: {width: number, height: number},\n    radius: number): void => {\n  const {x, y} = center;\n  const {width, height} = size;\n  ctx.beginPath();\n  ctx.moveTo(x, y + radius);\n  ctx.lineTo(x, y + height - radius);\n  ctx.arcTo(x, y + height, x + radius, y + height, radius);\n  ctx.lineTo(x + width - radius, y + height);\n  ctx.arcTo(x + width, y + height, x + width, y + height - radius, radius);\n  ctx.lineTo(x + width, y + radius);\n  ctx.arcTo(x + width, y, x + width - radius, y, radius);\n  ctx.lineTo(x + radius, y);\n  ctx.arcTo(x, y, x, y + radius, radius);\n  ctx.stroke();\n}\n","export type Graph = {\n  nodes: Node[];\n  links: Link[];\n};\n\nexport type Node = {\n  id: string | number;\n  name: string;\n  val: number;\n};\n\nexport type Link = {\n  source: string | number;\n  target: string | number;\n};\n\nexport const graphData: Graph = {\n  nodes: [\n    {\n      id: \"id1\",\n      name: \"name1\",\n      val: 1,\n    },\n    {\n      id: \"id2\",\n      name: \"name2\",\n      val: 2,\n    },\n    {\n      id: \"id3\",\n      name: \"name3\",\n      val: 3,\n    },\n    {\n      id: \"id4\",\n      name: \"name4\",\n      val: 4,\n    },\n    {\n      id: \"id5\",\n      name: \"name5\",\n      val: 5,\n    },\n    {\n      id: \"id6\",\n      name: \"name6\",\n      val: 6,\n    },\n  ],\n  links: [\n    {\n      source: \"id1\",\n      target: \"id2\",\n    },\n    {\n      source: \"id1\",\n      target: \"id3\",\n    },\n    {\n      source: \"id3\",\n      target: \"id2\",\n    },\n    {\n      source: \"id3\",\n      target: \"id4\",\n    },\n    {\n      source: \"id5\",\n      target: \"id6\",\n    },\n    {\n      source: \"id1\",\n      target: \"id6\",\n    },\n  ],\n};\n","import React from \"react\";\nimport { DynamicGraph } from './DynamicGraph';\nimport { graphData } from './data';\n\nexport const App: React.FC = () => {\n  return <DynamicGraph graphData={graphData} />;\n};\n","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { App } from './App'\n\nReactDom.render(<App />, document.getElementById('root'));"],"sourceRoot":""}